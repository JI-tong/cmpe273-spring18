# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import drone_pb2 as drone__pb2


class CoordinateStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.setup = channel.unary_unary(
        '/Coordinate/setup',
        request_serializer=drone__pb2.Regist.SerializeToString,
        response_deserializer=drone__pb2.RegistResult.FromString,
        )
    self.get = channel.unary_stream(
        '/Coordinate/get',
        request_serializer=drone__pb2.Request.SerializeToString,
        response_deserializer=drone__pb2.PeerDancerResult.FromString,
        )


class CoordinateServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def setup(self, request, context):
    """rpc setup(Request) returns (StartDancerResult){}
    rpc initial(Request) returns (stream StartDancerResult){}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CoordinateServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'setup': grpc.unary_unary_rpc_method_handler(
          servicer.setup,
          request_deserializer=drone__pb2.Regist.FromString,
          response_serializer=drone__pb2.RegistResult.SerializeToString,
      ),
      'get': grpc.unary_stream_rpc_method_handler(
          servicer.get,
          request_deserializer=drone__pb2.Request.FromString,
          response_serializer=drone__pb2.PeerDancerResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Coordinate', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
